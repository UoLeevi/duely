// https://code.visualstudio.com/docs/editor/userdefinedsnippets#_create-your-own-snippets
{
  "GraphQL type": {
    "prefix": "gqlt",
    "description": "Boilerplate for GraphQL schema for a type.",
    "body": [
      "import { withConnection } from '@duely/db';",
      "import { AuthenticationError } from 'apollo-server-core';",
      "",
      "const resource_name = '${TM_DIRECTORY/^.+\\/(.*)$/${1:/downcase}/}';",
      "",
      "export const ${TM_DIRECTORY/^.+\\/(.*)$/$1/} = {",
      "  typeDef: `",
      "    extend type Query {",
      "      ${TM_DIRECTORY/^.+\\/(.*)$/${1:/downcase}/}(id: ID!): ${TM_DIRECTORY/^.+\\/(.*)$/$1/}",
      "      ${TM_DIRECTORY/^.+\\/(.*)$/${1:/downcase}/}s(filter: ${TM_DIRECTORY/^.+\\/(.*)$/$1/}Filter!): [${TM_DIRECTORY/^.+\\/(.*)$/$1/}]",
      "    }",
      "",
      "    type ${TM_DIRECTORY/^.+\\/(.*)$/$1/} {",
      "      id: ID!",
      "      name: String!",
      "    }",
      "",
      "    input ${TM_DIRECTORY/^.+\\/(.*)$/$1/}Filter {",
      "      name: String",
      "    }",
      "  `,",
      "  resolvers: {",
      "    Query: {",
      "      async ${TM_DIRECTORY/^.+\\/(.*)$/${1:/downcase}/}(source, args, context, info) {",
      "        if (!context.jwt)",
      "          throw new AuthenticationError('Unauthorized');",
      "",
      "        return await withConnection(context, async withSession => {",
      "          return await withSession(async client => {",
      "            try {",
      "              const res = await client.query('SELECT * FROM operation_.query_resource_(\\$1::text)', [args.id]);",
      "              return res.rows[0];",
      "            } catch (error) {",
      "              throw new Error(error.message);",
      "            }",
      "          });",
      "        });",
      "      },",
      "      async ${TM_DIRECTORY/^.+\\/(.*)$/${1:/downcase}/}s(source, args, context, info) {",
      "        if (!context.jwt)",
      "          throw new AuthenticationError('Unauthorized');",
      "",
      "        return await withConnection(context, async withSession => {",
      "          return await withSession(async client => {",
      "            try {",
      "              const res = await client.query('SELECT * FROM operation_.query_resource_all_(\\$1::text, \\$2::jsonb)', [resource_name, args.filter]);",
      "              return res.rows;",
      "            } catch (error) {",
      "              throw new Error(error.message);",
      "            }",
      "          });",
      "        });",
      "      },",
      "    }",
      "  }",
      "};",
      ""
    ]
  }
}
