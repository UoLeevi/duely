{"version":3,"sources":["../../src/apollo/client.js"],"names":["endpoint","url_http","url_ws","ssrMode","window","getResolvedAccessToken","localStorage","getItem","cache","InMemoryCache","typePolicies","httpLink","HttpLink","uri","getAccessTokenPromise","getAccessToken","token","ApolloLink","execute","query","gql","then","data","begin_visit","success","visit_jwt","jwt","variables","email_address","password","process","env","DUELY_SERVICE_ACCOUNT_PASSWORD","context","headers","authorization","log_in","console","error","message","setItem","Error","wsClient","transportLink","createTransportLink","SubscriptionClient","reconnect","lazy","connectionParams","wsLink","WebSocketLink","split","definition","kind","operation","authLink","req","errorLink","graphQLErrors","networkError","forward","err","log","extensions","code","removeItem","client","ApolloClient","link","from","connectToDevTools","NODE_ENV","onClearStore","close","connect"],"mappings":"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","sourcesContent":["import { ApolloClient, HttpLink, InMemoryCache, ApolloLink, toPromise, gql } from '@apollo/client';\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport { setContext } from '@apollo/client/link/context';\nimport { onError } from '@apollo/client/link/error';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { SubscriptionClient } from 'subscriptions-transport-ws';\nimport typePolicies from './typePolicies';\n\nconst endpoint = 'api.duely.app/graphql';\nconst url_http = `https://${endpoint}`;\nconst url_ws = `wss://${endpoint}`;\n\nconst ssrMode = typeof window === 'undefined';\nlet getResolvedAccessToken = ssrMode\n  ? () => null\n  : () => localStorage?.getItem('user-jwt') || localStorage?.getItem('visitor-jwt');\n\nconst cache = new InMemoryCache({ typePolicies });\nconst httpLink = new HttpLink({ uri: url_http });\n\nlet getAccessTokenPromise = null;\n\nasync function getAccessToken() {\n  let token = getResolvedAccessToken();\n\n  if (token)\n    return token;\n\n  if (!getAccessTokenPromise) {\n    getAccessTokenPromise = toPromise(ApolloLink.execute(httpLink, {\n      query: gql`\n        mutation {\n          begin_visit {\n            success\n            message\n            jwt\n          }\n        }\n      `\n    }))\n    .then(async ({ data }) => {\n      if (data.begin_visit.success) {\n        const visit_jwt = data.begin_visit.jwt;\n\n        if (ssrMode) {\n          const { data } = await toPromise(ApolloLink.execute(httpLink, {\n            query: gql`\n              mutation($email_address: String!, $password: String!) {\n                log_in(email_address: $email_address, password: $password) {\n                  success\n                  message\n                  jwt\n                }\n              }\n            `,\n            variables: {\n              email_address: 'serviceaccount@duely.app',\n              password: process.env.DUELY_SERVICE_ACCOUNT_PASSWORD\n            },\n            context: {\n              headers: {\n                authorization: `Bearer ${visit_jwt}`\n              }\n            }\n          }));\n\n          if (data.log_in.success) {\n            token = data.log_in.jwt;\n            getResolvedAccessToken = () => token;\n          } else {\n            // eslint-disable-next-line\n            console.error(data.log_in.message);\n          }\n        } else {\n          localStorage.setItem('visitor-jwt', visit_jwt);\n        }\n\n      } else {\n        throw Error(data.begin_visit.message);\n      }\n    });\n  }\n\n  await getAccessTokenPromise;\n  return getResolvedAccessToken();\n}\n\nlet wsClient = null;\n\nconst transportLink = createTransportLink();\n\nfunction createTransportLink() {\n  if (ssrMode) return httpLink;\n\n  wsClient = new SubscriptionClient(url_ws, {\n    reconnect: true,\n    lazy: true,\n    connectionParams: async () => {\n      const token = await getAccessToken();\n      return token ? { authorization: `Bearer ${token}` } : {};\n    }\n  });\n  const wsLink = new WebSocketLink(wsClient);\n  return ApolloLink.split(\n    // split based on operation type\n    ({ query }) => {\n      const definition = getMainDefinition(query);\n      return (\n        definition.kind === 'OperationDefinition' &&\n        definition.operation === 'subscription'\n      );\n    },\n    wsLink,\n    httpLink\n  );\n}\n\nconst authLink = setContext(async (req, { headers }) => {\n  let token = await getAccessToken();\n\n  // return the headers to the context so httpLink can read them\n  return (token\n    ? {\n      headers: {\n        ...headers,\n        authorization: `Bearer ${token}`,\n      }\n    }\n    : {});\n});\n\nconst errorLink = onError(({ graphQLErrors, networkError, operation, forward }) => {\n  if (graphQLErrors) {\n    for (let err of graphQLErrors) {\n      console.log(err);\n\n      switch (err.extensions.code) {\n        case 'UNAUTHENTICATED':\n          // error code is set to UNAUTHENTICATED\n          // when AuthenticationError thrown in resolver\n\n          if (!ssrMode) {\n            // reset access tokens\n            localStorage.removeItem('user-jwt');\n            localStorage.removeItem('visitor-jwt');\n          }\n\n          // retry the request, returning the new observable\n          return forward(operation);\n\n        default:\n          break;\n      }\n    }\n  }\n\n  if (networkError) {\n    throw Error(`[Network error]: ${networkError}`);\n  }\n});\n\nexport const client = new ApolloClient({\n  ssrMode,\n  link: ApolloLink.from([\n    errorLink,\n    authLink,\n    transportLink\n  ]),\n  cache,\n  connectToDevTools: process.env.NODE_ENV !== 'production'\n});\n\nclient.onClearStore(() => {\n  // Close socket connection which will also unregister subscriptions on the server-side.\n  wsClient?.close();\n  // Reconnect to the server.\n  wsClient?.connect();\n});\n"],"file":"client.js"}