{"version":3,"sources":["../../src/queries/index.js"],"names":["query","queryDef","variables","result","defaultVariables","defaultOptions","options","client","data","current_user_Q","gql","notifyOnNetworkStatusChange","d","current_user","country_codes_Q","country_codes","services_agreement_Q","markdowns","current_user_agencies_Q","memberships","map","m","id","subdomain","agency","name","subdomain_name","stripe_account"],"mappings":";;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;SACsBA,K;;;;;mEAAf,iBAAqBC,QAArB,EAA+BC,SAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACGC,YAAAA,MADH,GAC8DF,QAD9D,CACGE,MADH,EACsBC,gBADtB,GAC8DH,QAD9D,CACWC,SADX,EAC2CG,cAD3C,4BAC8DJ,QAD9D;AAELC,YAAAA,SAAS,mCAAQE,gBAAR,GAA6BF,SAA7B,CAAT;;AAFK,sCAA6CI,OAA7C;AAA6CA,cAAAA,OAA7C;AAAA;;AAAA;AAAA,mBAGkBC,gBAAOP,KAAP;AACrBE,cAAAA,SAAS,EAATA;AADqB,eAElBG,cAFkB,GAGlBC,OAHkB,EAHlB;;AAAA;AAAA;AAGGE,YAAAA,IAHH,uBAGGA,IAHH;AAAA,6CASEL,MAAM,CAACK,IAAD,CATR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAYA,IAAMC,cAAc,GAAG;AAC5BT,EAAAA,KAAK,MAAEU,WAAF,oBADuB;AAU5BC,EAAAA,2BAA2B,EAAE,IAVD;AAW5BR,EAAAA,MAAM,EAAE,gBAAAS,CAAC;AAAA,WAAIA,CAAJ,aAAIA,CAAJ,uBAAIA,CAAC,CAAEC,YAAP;AAAA;AAXmB,CAAvB;;AAcA,IAAMC,eAAe,GAAG;AAC7Bd,EAAAA,KAAK,MAAEU,WAAF,qBADwB;AAM7BP,EAAAA,MAAM,EAAE,gBAAAS,CAAC;AAAA,WAAIA,CAAJ,aAAIA,CAAJ,uBAAIA,CAAC,CAAEG,aAAP;AAAA;AANoB,CAAxB;;AASA,IAAMC,oBAAoB,GAAG;AAClChB,EAAAA,KAAK,MAAEU,WAAF,qBAD6B;AAUlCP,EAAAA,MAAM,EAAE,gBAAAS,CAAC;AAAA,WAAIA,CAAJ,aAAIA,CAAJ,uBAAIA,CAAC,CAAEK,SAAH,CAAa,CAAb,EAAgBT,IAApB;AAAA;AAVyB,CAA7B;;AAaA,IAAMU,uBAAuB,GAAG;AACrClB,EAAAA,KAAK,MAAEU,WAAF,qBADgC;AAyErCC,EAAAA,2BAA2B,EAAE,IAzEQ;AA0ErCR,EAAAA,MAAM,EAAE,gBAAAS,CAAC;AAAA;;AAAA,WAAIA,CAAJ,aAAIA,CAAJ,0CAAIA,CAAC,CAAEC,YAAP,oDAAI,gBAAiBM,WAAjB,CACVC,GADU,CACN,UAAAC,CAAC;AAAA,aAAK;AACTC,QAAAA,EAAE,EAAED,CAAC,CAACE,SAAF,CAAYC,MAAZ,CAAmBF,EADd;AAETG,QAAAA,IAAI,EAAEJ,CAAC,CAACE,SAAF,CAAYC,MAAZ,CAAmBC,IAFhB;AAGTC,QAAAA,cAAc,EAAEL,CAAC,CAACE,SAAF,CAAYE,IAHnB;AAITE,QAAAA,cAAc,EAAEN,CAAC,CAACE,SAAF,CAAYC,MAAZ,CAAmBG;AAJ1B,OAAL;AAAA,KADK,CAAJ;AAAA;AA1E4B,CAAhC,C,CAqsourcesContent":["import { gql } from '@apollo/client';\nimport { client } from '../apollo/client';\n\n// just a wrapper for convenience\nexport async function query(queryDef, variables, ...options) {\n  const { result, variables: defaultVariables, ...defaultOptions } = queryDef;\n  variables = { ...defaultVariables, ...variables };\n  const { data } = await client.query({\n    variables,\n    ...defaultOptions,\n    ...options\n  });\n\n  return result(data);\n}\n\nexport const current_user_Q = {\n  query: gql`\n    query {\n      current_user {\n        id\n        name\n        email_address\n      }\n    }\n  `,\n  notifyOnNetworkStatusChange: true,\n  result: d => d?.current_user\n};\n\nexport const country_codes_Q = {\n  query: gql`\n    query {\n      country_codes\n    }\n  `,\n  result: d => d?.country_codes\n};\n\nexport const services_agreement_Q = {\n  query: gql`\n    query {\n      markdowns(filter: { name: \"Services Agreement\", agency_id: null }) {\n        id\n        name\n        data\n      }\n    }\n  `,\n  result: d => d?.markdowns[0].data\n};\n\nexport const current_user_agencies_Q = {\n  query: gql`\n    query {\n      current_user {\n        id\n        memberships {\n          id\n          access\n          subdomain {\n            id\n            name\n            agency {\n              id\n              name\n              stripe_account {\n                id\n                id_ext\n                business_profile {\n                  mcc\n                  name\n                  product_description\n                  support_address\n                  support_email\n                  support_phone\n                  support_url\n                  url\n                }\n                business_type\n                capabilities {\n                  card_payments\n                  transfers\n                }\n                requirements {\n                  current_deadline\n                  disabled_reason\n                  currently_due\n                  eventually_due\n                  past_due\n                  pending_verification\n                }\n                settings {\n                  branding {\n                    icon\n                    logo\n                    primary_color\n                    secondary_color\n                  }\n                }\n                charges_enabled\n                country\n                created\n                default_currency\n                details_submitted\n                email\n                payouts_enabled\n              }\n            }\n            memberships {\n              id\n              access\n              user {\n                id\n                name\n              }\n            }\n          }\n          user {\n            id\n          }\n        }\n      }\n    }\n  `,\n  notifyOnNetworkStatusChange: true,\n  result: d => d?.current_user?.memberships\n    .map(m => ({\n      id: m.subdomain.agency.id,\n      name: m.subdomain.agency.name,\n      subdomain_name: m.subdomain.name,\n      stripe_account: m.subdomain.agency.stripe_account\n    }))\n};\n\n\n\n// agencies: {\n//   query: gql`\n//     query {\n//       me {\n//         uuid\n//         agenciesConnection {\n//           edges {\n//             cursor\n//             roles\n//             node {\n//               uuid\n//               name\n//               subdomain {\n//                 uuid\n//                 name\n//               }\n//               theme {\n//                 uuid\n//                 name\n//                 imageLogo {\n//                   uuid\n//                   name\n//                   color\n//                   data\n//                 }\n//                 imageHero {\n//                   uuid\n//                   name\n//                   color\n//                   data\n//                 }\n//                 colorPrimary\n//                 colorSecondary\n//                 colorAccent\n//                 colorBackground\n//                 colorSurface\n//                 colorError\n//                 colorSuccess\n//               }\n//             }\n//           }\n//         }\n//       }\n//     }\n//   `,\n//   result: d => d?.me.agenciesConnection.edges\n//     .map(edge => ({ ...edge.node, roles: edge.roles }))\n// },\n// invites: {\n//   query: gql`\n//     query {\n//       me {\n//         uuid\n//         invitesConnection {\n//           edges {\n//             node {\n//               uuid\n//               status\n//               agency {\n//                 uuid\n//                 name\n//                 subdomain {\n//                   uuid\n//                   name\n//                 }\n//               }\n//             }\n//           }\n//         }\n//       }\n//     }\n//   `,\n//   result: d => d?.me.invitesConnection.edges\n//     .map(edge => edge.node)\n//     .filter(invite => invite.status === null)\n// },\n// profile: {\n//   query: gql`\n//     query {\n//       me {\n//         uuid\n//         name\n//         agenciesConnection {\n//           edges {\n//             cursor\n//             roles\n//             node {\n//               uuid\n//               name\n//               subdomain {\n//                 uuid\n//                 name\n//               }\n//               theme {\n//                 uuid\n//                 name\n//                 imageLogo {\n//                   uuid\n//                   name\n//                   color\n//                   data\n//                 }\n//                 imageHero {\n//                   uuid\n//                   name\n//                   color\n//                   data\n//                 }\n//                 colorPrimary\n//                 colorSecondary\n//                 colorAccent\n//                 colorBackground\n//                 colorSurface\n//                 colorError\n//                 colorSuccess\n//               }\n//             }\n//           }\n//         }\n//         invitesConnection {\n//           edges {\n//             node {\n//               uuid\n//               status\n//               agency {\n//                 uuid\n//                 name\n//                 subdomain {\n//                   uuid\n//                   name\n//                 }\n//               }\n//             }\n//           }\n//         }\n//       }\n//     }\n//   `,\n//   result: d => d?.me\n// },\n// portal: {\n//   query: gql`\n//     query($subdomainName: String) {\n//       agency(subdomainName: $subdomainName) {\n//         uuid\n//         name\n//         theme {\n//           uuid\n//           name\n//           imageLogo {\n//             uuid\n//             name\n//             data\n//             color\n//           }\n//           imageHero {\n//             uuid\n//             name\n//             data\n//             color\n//           }\n//           colorPrimary\n//           colorSecondary\n//           colorAccent\n//           colorBackground\n//           colorSurface\n//           colorError\n//           colorSuccess\n//         }\n//         servicesConnection {\n//           edges(status: \"live\") {\n//             cursor\n//             node {\n//               uuid\n//               name\n//               status\n//               steps {\n//                 uuid\n//                 name\n//                 type\n//               }\n//             }\n//           }\n//         }\n//       }\n//     }\n//   `,\n//   result: d => d?.agency\n// },\n// dashboard: {\n//   query: gql`\n//     query($subdomainName: String) {\n//       agency(subdomainName: $subdomainName) {\n//         uuid\n//         name\n//         theme {\n//           uuid\n//           name\n//           imageLogo {\n//             uuid\n//             name\n//             data\n//             color\n//           }\n//           imageHero {\n//             uuid\n//             name\n//             data\n//             color\n//           }\n//           colorPrimary\n//           colorSecondary\n//           colorAccent\n//           colorBackground\n//           colorSurface\n//           colorError\n//           colorSuccess\n//         }\n//         servicesConnection {\n//           edges {\n//             cursor\n//             node {\n//               uuid\n//               name\n//               status\n//               steps {\n//                 uuid\n//                 name\n//                 type\n//               }\n//             }\n//           }\n//         }\n//         subjectsConnection {\n//           edges {\n//             cursor\n//             roles\n//             node {\n//               uuid\n//               name\n//               emailAddress\n//             }\n//           }\n//         }\n//       }\n//     }\n//   `,\n//   result: d => d?.agency\n// },\n// agency: {\n//   query: gql`\n//     query($subdomainName: String) {\n//       agency(subdomainName: $subdomainName) {\n//         uuid\n//         name\n//         theme {\n//           uuid\n//           name\n//           imageLogo {\n//             uuid\n//             name\n//             data\n//             color\n//           }\n//           imageHero {\n//             uuid\n//             name\n//             data\n//             color\n//           }\n//           colorPrimary\n//           colorSecondary\n//           colorAccent\n//           colorBackground\n//           colorSurface\n//           colorError\n//           colorSuccess\n//         }\n//       }\n//     }\n//   `,\n//   result: d => d?.agency\n// },\n// agencyRoles: {\n//   query: gql`\n//     query($agencyUuids: [ID!]) {\n//       me {\n//         uuid\n//         name\n//         type\n//         agenciesConnection {\n//           edges(uuids: $agencyUuids) {\n//             node {\n//               uuid\n//             }\n//             roles\n//           }\n//         }\n//       }\n//     }\n//   `,\n//   result: d => d?.me.agenciesConnection\n// },\n// clients: {\n//   query: gql`\n//     query($agencyUuid: ID!) {\n//       agency(uuid: $agencyUuid) {\n//         uuid\n//         name\n//         clientsConnection {\n//           edges {\n//             cursor\n//             node {\n//               uuid\n//               name\n//               emailAddress\n//               subject {\n//                 uuid\n//                 name\n//                 emailAddress\n//               }\n//               invite {\n//                 uuid\n//                 status\n//                 inviteeEmailAddress\n//               }\n//             }\n//           }\n//         }\n//       }\n//     }\n//   `,\n//   result: d => d?.agency.clientsConnection.edges\n//     .map(edge => edge.node)\n// },\n// services: {\n//   query: gql`\n//     query($agencyUuid: ID!) {\n//       agency(uuid: $agencyUuid) {\n//         uuid\n//         name\n//         servicesConnection {\n//           edges {\n//             cursor\n//             node {\n//               uuid\n//               name\n//               status\n//               steps {\n//                 uuid\n//                 name\n//                 type\n//               }\n//             }\n//           }\n//         }\n//       }\n//     }\n//   `,\n//   result: d => d?.agency.servicesConnection.edges\n//     .map(edge => edge.node)\n// }\n"],"file":"index.js"}