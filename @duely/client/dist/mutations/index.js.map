{"version":3,"sources":["../../src/mutations/index.js"],"names":["mutate","mutationDef","variables","result","after","defaultVariables","defaultOptions","options","client","data","res","cache","log_in_M","mutation","gql","d","success","window","localStorage","setItem","jwt","resetStore","log_out_M","removeItem","verify_password_reset_M","verify_sign_up_M","start_password_reset_M","start_sign_up_M","create_agency_M","create_service_M","update_service_M","create_price_M"],"mappings":"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","sourcesContent":["import { gql } from '@apollo/client';\nimport { client } from '../apollo/client';\n// import produce from 'immer';\n// import { query } from './queries';\n\n// just a wrapper for convenience\nexport async function mutate(mutationDef, variables, ...options) {\n  const { result, after, variables: defaultVariables, ...defaultOptions } = mutationDef;\n  variables = { ...defaultVariables, ...variables };\n  const { data } = await client.mutate({\n    variables,\n    ...defaultOptions,\n    ...options\n  });\n\n  const res = result(data);\n\n  if (after) {\n    await after(client.cache, res, variables);\n  }\n\n  return res;\n}\n\nexport const log_in_M = {\n  mutation: gql`\n    mutation($email_address: String!, $password: String!) {\n      log_in(email_address: $email_address, password: $password) {\n        success\n        message\n        jwt\n      }\n    }\n  `,\n  result: d => d['log_in'],\n  async after(cache, result) {\n    if (!result.success) return;\n\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('user-jwt', result.jwt);\n    }\n\n    await client.resetStore();\n  }\n};\n\nexport const log_out_M = {\n  mutation: gql`\n    mutation {\n      log_out {\n        success\n        message\n      }\n    }\n  `,\n  result: d => d['log_out'],\n  async after(cache, result) {\n    if (!result.success) return;\n\n    if (typeof window !== 'undefined') {\n      localStorage.removeItem('user-jwt');\n    }\n\n    await client.resetStore();\n  }\n};\n\nexport const verify_password_reset_M = {\n  mutation: gql`\n    mutation($verification_code: String!, $password: String!) {\n      verify_password_reset(verification_code: $verification_code, password: $password) {\n        success\n        message\n      }\n    }\n  `,\n  result: d => d['verify_password_reset']\n};\n\nexport const verify_sign_up_M = {\n  mutation: gql`\n    mutation($verification_code: String!) {\n      verify_sign_up(verification_code: $verification_code) {\n        success\n        message\n      }\n    }\n  `,\n  result: d => d['verify_sign_up']\n};\n\nexport const start_password_reset_M = {\n  mutation: gql`\n    mutation($email_address: String!, $redirect_url: String) {\n      start_password_reset(email_address: $email_address, redirect_url: $redirect_url) {\n        success\n        message\n      }\n    }\n  `,\n  result: d => d['start_password_reset']\n};\n\nexport const start_sign_up_M = {\n  mutation: gql`\n    mutation($email_address: String!, $password: String!, $name: String!, $redirect_url: String) {\n      start_sign_up(email_address: $email_address, password: $password, name: $name, redirect_url: $redirect_url) {\n        success\n        message\n      }\n    }\n  `,\n  result: d => d['start_sign_up']\n};\n\nexport const create_agency_M = {\n  mutation: gql`\n    mutation($name: String!, $subdomain_name: String!, $country_code: String!, $image_logo: ImageInput!, $return_url: String!) {\n      create_agency(name: $name, subdomain_name: $subdomain_name, country_code: $country_code, image_logo: $image_logo, return_url: $return_url) {\n        stripe_verification_url\n        message\n        success\n        agency {\n          id\n          name\n          subdomain {\n            id\n            name\n          }\n        }\n      }\n    }\n  `,\n  result: d => d['create_agency']\n}\n\nexport const create_service_M = {\n  mutation: gql`\n    mutation($agency_id: ID!, $name: String!, $description: String!, $url_name: String!, $duration: String, $status: String) {\n      create_service(agency_id: $agency_id, name: $name, description: $description, url_name: $url_name, duration: $duration, status: $status) {\n        success\n        message\n        service {\n          id\n          name\n          url_name\n          default_variant {\n            id\n            name\n            description\n            duration\n            status\n          }\n        }\n      }\n    }\n  `,\n  result: d => d['create_service']\n}\n\nexport const update_service_M = {\n  mutation: gql`\n    mutation($service_id: ID!, $name: String, $description: String, $url_name: String, $duration: String, $default_price_id: ID, $status: String) {\n      update_service(service_id: $service_id, name: $name, description: $description, url_name: $url_name, duration: $duration, default_price_id: $default_price_id, status: $status) {\n        success\n        message\n        service {\n          id\n          name\n          url_name\n          default_variant {\n            id\n            name\n            description\n            duration\n            status\n            default_price {\n              id\n            }\n          }\n        }\n      }\n    }\n  `,\n  result: d => d['update_service']\n}\n\nexport const create_price_M = {\n  mutation: gql`\n    mutation($service_variant_id: ID!, $unit_amount: Int!, $currency: String!, $recurring_interval: String, $recurring_interval_count: Int, $status: String) {\n      create_price(service_variant_id: $service_variant_id, unit_amount: $unit_amount, currency: $currency, recurring_interval: $recurring_interval, recurring_interval_count: $recurring_interval_count, status: $status) {\n        success\n        message\n        price {\n          id\n          name\n          unit_amount\n          currency\n          type\n          recurring_interval\n          recurring_interval_count\n        }\n      }\n    }\n  `,\n  result: d => d['create_price']\n}\n\n// createClient: {\n//   mutation: gql`\n//     mutation($agencyUuid: ID!, $name: String!, $emailAddress: String) {\n//       createClient(agencyUuid: $agencyUuid, name: $name, emailAddress: $emailAddress) {\n//         success\n//         message\n//         client {\n//           uuid\n//           name\n//           emailAddress\n//         }\n//       }\n//     }\n//   `,\n//   result: d => d['createClient'],\n//   after(client, result, { agencyUuid }) {\n//     if (!result.success) return;\n//     const query = queries.clients.query;\n//     const data = produce(client.readQuery({ query, variables: { agencyUuid } }), data => {\n//       data.agency.clientsConnection.edges.push(result.client);\n//     });\n//     client.writeQuery({ query, data });\n//   }\n// },\n// deleteClient: {\n//   mutation: gql`\n//     mutation($clientUuid: ID!) {\n//       deleteClient(clientUuid: $clientUuid) {\n//         success\n//         message\n//         uuid\n//       }\n//     }\n//   `,\n//   result: d => d['createAgency']\n// },\n// createService: {\n//   mutation: gql`\n//     mutation($agencyUuid: ID!, $name: String!) {\n//       createService(agencyUuid: $agencyUuid, name: $name) {\n//         success\n//         message\n//         service {\n//           uuid\n//           name\n//           status\n//         }\n//       }\n//     }\n//   `,\n//   result: d => d['createService'],\n//   after(client, result, { agencyUuid }) {\n//     if (!result.success) return;\n//     const query = queries.services.query;\n//     const data = produce(client.readQuery({ query, variables: { agencyUuid } }), data => {\n//       data.agency.servicesConnection.edges.push(result.service);\n//     });\n//     client.writeQuery({ query, data });\n//   }\n// },\n// deleteService: {\n//   mutation: gql`\n//     mutation($serviceUuid: ID!) {\n//       deleteService(serviceUuid: $serviceUuid) {\n//         success\n//         message\n//         uuid\n//       }\n//     }\n//   `,\n//   result: d => d['createAgency']\n// },\n// editImage: {\n//   mutation: gql`\n//     mutation($agencyUuid: ID!, $imageName: String!, $imageData: String!, $imageColor: String!) {\n//       editImage(agencyUuid: $agencyUuid, imageName: $imageName, imageData: $imageData, imageColor: $imageColor) {\n//         success\n//         message\n//         image {\n//           uuid\n//         }\n//       }\n//     }\n//   `,\n//   result: d => d['editImage']\n// },\n// };\n"],"file":"index.js"}