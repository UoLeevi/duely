#import "../fragments/index.graphql"

query CurrentUser {
  current_user {
    ...user
    memberships {
      ...membership
    }
  }
}

query Countries {
  country_codes
}

query CountrySpec($country_code: ID!) {
  country_spec(country_code: $country_code) {
    id
    default_currency
    supported_payment_currencies
    supported_payment_methods
    supported_transfer_countries
  }
}

query Theme($theme_id: ID!) {
  theme(id: $theme_id) {
    ...theme
  }
}

query Themes(
  $filter: ThemeFilter!
  $token: String
  $desc: Boolean
  $order_by: String
  $limit: Int
  $offset: Int
  $before_id: ID
  $after_id: ID
) {
  themes(
    filter: $filter
    token: $token
    desc: $desc
    order_by: $order_by
    limit: $limit
    offset: $offset
    before_id: $before_id
    after_id: $after_id
  ) {
    ...theme
  }
}

query Markdown($markdown_id: ID!) {
  markdown(id: $markdown_id) {
    ...markdown
  }
}

query Markdowns(
  $filter: MarkdownFilter!
  $token: String
  $desc: Boolean
  $order_by: String
  $limit: Int
  $offset: Int
  $before_id: ID
  $after_id: ID
) {
  markdowns(
    filter: $filter
    token: $token
    desc: $desc
    order_by: $order_by
    limit: $limit
    offset: $offset
    before_id: $before_id
    after_id: $after_id
  ) {
    ...markdown
  }
}

query Image($image_id: ID!) {
  image(id: $image_id) {
    ...image
  }
}

query Images(
  $filter: ImageFilter!
  $token: String
  $desc: Boolean
  $order_by: String
  $limit: Int
  $offset: Int
  $before_id: ID
  $after_id: ID
) {
  images(
    filter: $filter
    token: $token
    desc: $desc
    order_by: $order_by
    limit: $limit
    offset: $offset
    before_id: $before_id
    after_id: $after_id
  ) {
    ...image
  }
}

query AgencyStripeAccount($agency_id: ID!) {
  agency(id: $agency_id) {
    id
    stripe_account {
      ...stripe_account
    }
  }
}

query AgencyStripeAccountUpdateUrl($agency_id: ID!) {
  agency(id: $agency_id) {
    id
    stripe_account {
      id
      account_update_url {
        url
      }
    }
  }
}

query AgencyStripeAccountBalance($agency_id: ID!) {
  agency(id: $agency_id) {
    id
    stripe_account {
      id
      balance {
        available {
          amount
          currency
          source_types {
            card
            bank_account
          }
        }
        pending {
          amount
          currency
          source_types {
            card
            bank_account
          }
        }
        connect_reserved {
          amount
          currency
          source_types {
            card
            bank_account
          }
        }
      }
    }
  }
}

query AgencyStripeAccountBalanceTransactions(
  $agency_id: ID!
  $created: DateTime
  $starting_after_id: String
  $ending_before_id: String
  $limit: Int
) {
  agency(id: $agency_id) {
    id
    stripe_account {
      id
      balance_transactions(
        created: $created
        starting_after_id: $starting_after_id
        ending_before_id: $ending_before_id
        limit: $limit
      ) {
        ...balance_transaction
      }
    }
  }
}

query AgencyStripeAccountPaymentIntents(
  $agency_id: ID!
  $created: DateTime
  $starting_after_id: String
  $ending_before_id: String
  $limit: Int
) {
  agency(id: $agency_id) {
    id
    stripe_account {
      id
      payment_intents(
        created: $created
        starting_after_id: $starting_after_id
        ending_before_id: $ending_before_id
        limit: $limit
      ) {
        ...payment_intent
      }
    }
  }
}

query AgencyStripeAccountBankAccounts(
  $agency_id: ID!
  $starting_after_id: String
  $ending_before_id: String
  $limit: Int
) {
  agency(id: $agency_id) {
    id
    stripe_account {
      id
      bank_accounts(
        starting_after_id: $starting_after_id
        ending_before_id: $ending_before_id
        limit: $limit
      ) {
        ...bank_account
      }
    }
  }
}

query AgencyStripeAccountCoupons(
  $agency_id: ID!
  $starting_after_id: String
  $ending_before_id: String
  $limit: Int
) {
  agency(id: $agency_id) {
    id
    stripe_account {
      id
      coupons(
        starting_after_id: $starting_after_id
        ending_before_id: $ending_before_id
        limit: $limit
      ) {
        ...coupon
      }
    }
  }
}

query Coupon($stripe_account_id: ID!, $coupon_id: ID!) {
  coupon(stripe_account_id: $stripe_account_id, coupon_id: $coupon_id) {
    ...coupon
  }
}

query InvoiceItem($stripe_account_id: ID!, $invoiceitem_id: ID!) {
  invoiceitem(stripe_account_id: $stripe_account_id, invoiceitem_id: $invoiceitem_id) {
    ...invoiceitem
  }
}

query AgencyStripeAccountInvoices(
  $agency_id: ID!
  $customer_id: ID
  $status: String
  $subscription: ID
  $collection_method: String
  $due_date: DateTime
  $created: DateTime
  $starting_after_id: String
  $ending_before_id: String
  $limit: Int
) {
  agency(id: $agency_id) {
    id
    stripe_account {
      id
      invoices(
        customer_id: $customer_id
        status: $status
        subscription: $subscription
        collection_method: $collection_method
        due_date: $due_date
        created: $created
        starting_after_id: $starting_after_id
        ending_before_id: $ending_before_id
        limit: $limit
      ) {
        ...invoice
      }
    }
  }
}

query AgencyStripeAccountInvoiceItems(
  $agency_id: ID!
  $customer_id: ID
  $invoice: ID
  $pending: Boolean
  $created: DateTime
  $starting_after_id: String
  $ending_before_id: String
  $limit: Int
) {
  agency(id: $agency_id) {
    id
    stripe_account {
      id
      invoiceitems(
        customer_id: $customer_id
        invoice: $invoice
        pending: $pending
        created: $created
        starting_after_id: $starting_after_id
        ending_before_id: $ending_before_id
        limit: $limit
      ) {
        ...invoiceitem
      }
    }
  }
}

query Invoice($stripe_account_id: ID!, $invoice_id: ID!) {
  invoice(stripe_account_id: $stripe_account_id, invoice_id: $invoice_id) {
    ...invoice
  }
}

query Customer($customer_id: ID!) {
  customer(id: $customer_id) {
    ...customer
  }
}

query AgencyCustomers(
  $agency_id: ID!
  $filter: CustomerFilter
  $token: String
  $desc: Boolean
  $order_by: String
  $limit: Int
  $offset: Int
  $before_id: ID
  $after_id: ID
) {
  agency(id: $agency_id) {
    id
    stripe_account {
      id
      customers(
        filter: $filter
        token: $token
        desc: $desc
        order_by: $order_by
        limit: $limit
        offset: $offset
        before_id: $before_id
        after_id: $after_id
      ) {
        ...customer
      }
    }
  }
}

query Customers(
  $filter: CustomerFilter!
  $token: String
  $desc: Boolean
  $order_by: String
  $limit: Int
  $offset: Int
  $before_id: ID
  $after_id: ID
) {
  customers(
    filter: $filter
    token: $token
    desc: $desc
    order_by: $order_by
    limit: $limit
    offset: $offset
    before_id: $before_id
    after_id: $after_id
  ) {
    ...customer
  }
}

query CountCustomers($filter: CustomerFilter!, $token: String) {
  count_customers(filter: $filter, token: $token)
}

query AgencySubscriptionPlan($agency_id: ID!) {
  agency(id: $agency_id) {
    id
    subscription_plan {
      ...subscription_plan
    }
  }
}

query Agency($agency_id: ID!) {
  agency(id: $agency_id) {
    ...agency
  }
}

query Agencies(
  $filter: AgencyFilter!
  $token: String
  $desc: Boolean
  $order_by: String
  $limit: Int
  $offset: Int
  $before_id: ID
  $after_id: ID
) {
  agencies(
    filter: $filter
    token: $token
    desc: $desc
    order_by: $order_by
    limit: $limit
    offset: $offset
    before_id: $before_id
    after_id: $after_id
  ) {
    ...agency
  }
}

query CurrentUserAgencies {
  current_user {
    id
    memberships {
      id
      access
      subdomain {
        id
        name
        agency {
          ...agency
          stripe_account {
            ...stripe_account
          }
          subscription_plan {
            ...subscription_plan
          }
        }
        memberships {
          ...membership
        }
      }
      user {
        id
      }
    }
  }
}

query SubdomainPublic($subdomain_name: String!) {
  subdomains(filter: { name: $subdomain_name }) {
    id
    name
    agency {
      id
      name
      theme {
        ...theme
      }
    }
  }
}

query Product($product_id: ID!) {
  product(id: $product_id) {
    ...product
  }
}

query Products(
  $filter: ProductFilter!
  $token: String
  $desc: Boolean
  $order_by: String
  $limit: Int
  $offset: Int
  $before_id: ID
  $after_id: ID
) {
  products(
    filter: $filter
    token: $token
    desc: $desc
    order_by: $order_by
    limit: $limit
    offset: $offset
    before_id: $before_id
    after_id: $after_id
  ) {
    ...product
  }
}

query CountProducts($filter: ProductFilter!, $token: String) {
  count_products(filter: $filter, token: $token)
}

query OrderDetails($order_id: ID!, $token: String) {
  order(id: $order_id, token: $token) {
    ...order
    items(token: $token) {
      ...order_item
    }
    customer(token: $token) {
      id
      name
      email_address
    }
    stripe_checkout_session {
      ...stripe_checkout_session
      payment_intent {
        ...payment_intent
      }
    }
  }
}

query Order($order_id: ID!, $token: String) {
  order(id: $order_id, token: $token) {
    ...order
    items(token: $token) {
      ...order_item
    }
    customer(token: $token) {
      id
      name
      email_address
    }
    stripe_checkout_session {
      id
      id_ext
      amount_subtotal
      amount_total
      currency
      payment_status
    }
  }
}

query Orders(
  $filter: OrderFilter!
  $token: String
  $desc: Boolean
  $order_by: String
  $limit: Int
  $offset: Int
  $before_id: ID
  $after_id: ID
) {
  orders(
    filter: $filter
    token: $token
    desc: $desc
    order_by: $order_by
    limit: $limit
    offset: $offset
    before_id: $before_id
    after_id: $after_id
  ) {
    ...order
    items(token: $token) {
      ...order_item
    }
    customer(token: $token) {
      id
      name
      email_address
    }
    stripe_checkout_session(token: $token) {
      id
      id_ext
      amount_subtotal
      amount_total
      currency
      payment_status
    }
  }
}

query CountOrders($filter: OrderFilter!, $token: String) {
  count_orders(filter: $filter, token: $token)
}

query OrderItem($order_item_id: ID!, $token: String) {
  order_item(id: $order_item_id, token: $token) {
    ...order_item
  }
}

query OrderItems(
  $filter: OrderItemFilter!
  $token: String
  $desc: Boolean
  $order_by: String
  $limit: Int
  $offset: Int
  $before_id: ID
  $after_id: ID
) {
  order_items(
    filter: $filter
    token: $token
    desc: $desc
    order_by: $order_by
    limit: $limit
    offset: $offset
    before_id: $before_id
    after_id: $after_id
  ) {
    ...order_item
  }
}

query ProductAndAgencyFromUrlParts($subdomain_name: String!, $product_url_name: String!) {
  subdomains(filter: { name: $subdomain_name }) {
    id
    name
    agency {
      id
      products(filter: { url_name: $product_url_name }) {
        ...product
        agency {
          ...agency
        }
      }
    }
  }
}

query SubdomainAgency($subdomain_name: String!) {
  subdomains(filter: { name: $subdomain_name }) {
    id
    name
    agency {
      ...agency
    }
  }
}

query SubdomainAgencyExtended($subdomain_name: String!) {
  subdomains(filter: { name: $subdomain_name }) {
    id
    name
    agency {
      ...agency
      supported_payment_currencies
    }
  }
}

query SubdomainAgencyStripeAccountUpdateUrl($subdomain_name: String!) {
  subdomains(filter: { name: $subdomain_name }) {
    id
    name
    agency {
      id
      stripe_account {
        account_update_url {
          url
        }
      }
    }
  }
}

query AgencySettings($agency_id: ID!) {
  agency(id: $agency_id) {
    id
    settings {
      ...agency_settings
    }
  }
}

query ProductSettings($product_id: ID!) {
  product(id: $product_id) {
    id
    settings {
      ...product_settings
    }
  }
}

query AgencyPages($agency_id: ID!, $page_definition_id: ID) {
  pages(filter: { agency_id: $agency_id, page_definition_id: $page_definition_id }) {
    ...page
  }
}

query ProductPages($product_id: ID!, $page_definition_id: ID) {
  pages(filter: { product_id: $product_id, page_definition_id: $page_definition_id }) {
    ...page
  }
}

query Page($page_id: ID!) {
  page(id: $page_id) {
    ...page
  }
}

query PageByUrl($url: String!) {
  page_by_url(url: $url) {
    ...page
  }
}

query PageBlock($page_block_id: ID!) {
  page_block(id: $page_block_id) {
    ...page_block
  }
}

query PageDefinition($page_definition_id: ID!) {
  page_definition(id: $page_definition_id) {
    ...page_definition
  }
}

query PageBlockDefinition($page_block_definition_id: ID!) {
  page_block_definition(id: $page_block_definition_id) {
    ...page_block_definition
  }
}

query PageDefinitionsByName($name: String!) {
  page_definitions(filter: { name: $name }) {
    ...page_definition
  }
}

query PageDefinitionByUrlPath($url_path: String!) {
  page_definition_by_url_path(url_path: $url_path) {
    ...page_definition
  }
}

query PageBlockDefinitionsByName($name: String!) {
  page_block_definitions(filter: { name: $name }) {
    ...page_block_definition
  }
}

query CalculateTransactionFee($subscription_plan_id: ID!, $amount: Int!, $currency: String!) {
  subscription_plan(id: $subscription_plan_id) {
    id
    calculate_fee(amount: $amount, currency: $currency)
  }
}

query FormField($form_field_id: ID!) {
  form_field(id: $form_field_id) {
    ...form_field
  }
}

query FormFields(
  $filter: FormFieldFilter!
  $token: String
  $desc: Boolean
  $order_by: String
  $limit: Int
  $offset: Int
  $before_id: ID
  $after_id: ID
) {
  form_fields(
    filter: $filter
    token: $token
    desc: $desc
    order_by: $order_by
    limit: $limit
    offset: $offset
    before_id: $before_id
    after_id: $after_id
  ) {
    ...form_field
  }
}

query Credential($credential_id: ID!) {
  credential(id: $credential_id) {
    ...credential
  }
}

query Credentials(
  $filter: CredentialFilter!
  $token: String
  $desc: Boolean
  $order_by: String
  $limit: Int
  $offset: Int
  $before_id: ID
  $after_id: ID
) {
  credentials(
    filter: $filter
    token: $token
    desc: $desc
    order_by: $order_by
    limit: $limit
    offset: $offset
    before_id: $before_id
    after_id: $after_id
  ) {
    ...credential
  }
}

query CredentialType($credential_type_id: ID!) {
  credential_type(id: $credential_type_id) {
    ...credential_type
  }
}

query CredentialTypes(
  $filter: CredentialTypeFilter!
  $token: String
  $desc: Boolean
  $order_by: String
  $limit: Int
  $offset: Int
  $before_id: ID
  $after_id: ID
) {
  credential_types(
    filter: $filter
    token: $token
    desc: $desc
    order_by: $order_by
    limit: $limit
    offset: $offset
    before_id: $before_id
    after_id: $after_id
  ) {
    ...credential_type
  }
}

query Integration($integration_id: ID!) {
  integration(id: $integration_id) {
    ...integration
  }
}

query Integrations(
  $filter: IntegrationFilter!
  $token: String
  $desc: Boolean
  $order_by: String
  $limit: Int
  $offset: Int
  $before_id: ID
  $after_id: ID
) {
  integrations(
    filter: $filter
    token: $token
    desc: $desc
    order_by: $order_by
    limit: $limit
    offset: $offset
    before_id: $before_id
    after_id: $after_id
  ) {
    ...integration
  }
}

query IntegrationConfig($integration_config_id: ID!) {
  integration_config(id: $integration_config_id) {
    ...integration_config
  }
}

query IntegrationConfigs(
  $filter: IntegrationConfigFilter!
  $token: String
  $desc: Boolean
  $order_by: String
  $limit: Int
  $offset: Int
  $before_id: ID
  $after_id: ID
) {
  integration_configs(
    filter: $filter
    token: $token
    desc: $desc
    order_by: $order_by
    limit: $limit
    offset: $offset
    before_id: $before_id
    after_id: $after_id
  ) {
    ...integration_config
  }
}

query IntegrationType($integration_type_id: ID!) {
  integration_type(id: $integration_type_id) {
    ...integration_type
  }
}

query IntegrationTypes(
  $filter: IntegrationTypeFilter!
  $token: String
  $desc: Boolean
  $order_by: String
  $limit: Int
  $offset: Int
  $before_id: ID
  $after_id: ID
) {
  integration_types(
    filter: $filter
    token: $token
    desc: $desc
    order_by: $order_by
    limit: $limit
    offset: $offset
    before_id: $before_id
    after_id: $after_id
  ) {
    ...integration_type
  }
}
