#import "../fragments/index.graphql"

mutation BeginVisit {
  begin_visit {
    success
    message
    jwt
  }
}

mutation EndVisit {
  end_visit {
    success
    message
  }
}

mutation LogIn($email_address: String!, $password: String!, $recaptcha_token: String) {
  log_in(email_address: $email_address, password: $password, recaptcha_token: $recaptcha_token) {
    success
    message
    jwt
  }
}

mutation LogOut {
  log_out {
    success
    message
  }
}

mutation VerifyPasswordReset($verification_code: String!, $password: String!) {
  verify_password_reset(verification_code: $verification_code, password: $password) {
    success
    message
  }
}

mutation VerifySignUp($verification_code: String!) {
  verify_sign_up(verification_code: $verification_code) {
    success
    message
  }
}

mutation StartPasswordReset($email_address: String!, $redirect_url: String) {
  start_password_reset(email_address: $email_address, redirect_url: $redirect_url) {
    success
    message
  }
}

mutation StartSignUp(
  $email_address: String!
  $password: String!
  $name: String!
  $redirect_url: String
  $recaptcha_token: String
) {
  start_sign_up(
    email_address: $email_address
    password: $password
    name: $name
    redirect_url: $redirect_url
    recaptcha_token: $recaptcha_token
  ) {
    success
    message
  }
}

mutation CreateAgency(
  $name: String!
  $livemode: Boolean!
  $subdomain_name: String!
  $country_code: String!
  $image_logo: ImageInput!
  $return_url: String!
) {
  create_agency(
    name: $name
    livemode: $livemode
    subdomain_name: $subdomain_name
    country_code: $country_code
    image_logo: $image_logo
    return_url: $return_url
  ) {
    stripe_verification_url
    message
    success
    agency {
      id
      name
      subdomain {
        id
        name
      }
    }
  }
}

mutation UpdateAgency($agency_id: ID!, $default_pricing_currency: String) {
  update_agency(agency_id: $agency_id, default_pricing_currency: $default_pricing_currency) {
    message
    success
    agency {
      id
      name
      default_pricing_currency
    }
  }
}

mutation UpdateTheme(
  $theme_id: ID!
  $image_logo_id: ID
  $image_hero_id: ID
  $color_primary: String
  $color_secondary: String
  $color_accent: String
  $color_background: String
  $color_surface: String
  $color_error: String
  $color_success: String
) {
  update_theme(
    theme_id: $theme_id
    image_logo_id: $image_logo_id
    image_hero_id: $image_hero_id
    color_primary: $color_primary
    color_secondary: $color_secondary
    color_accent: $color_accent
    color_background: $color_background
    color_surface: $color_surface
    color_error: $color_error
    color_success: $color_success
  ) {
    message
    success
    theme {
      ...theme
    }
  }
}

mutation CreateImage(
  $agency_id: ID
  $name: String!
  $data: String!
  $color: String!
  $access: AccessLevel
) {
  create_image(agency_id: $agency_id, name: $name, data: $data, color: $color, access: $access) {
    success
    message
    image {
      ...image
    }
  }
}

mutation UpdateImage(
  $image_id: ID!
  $name: String
  $data: String
  $color: String
  $access: AccessLevel
) {
  update_image(image_id: $image_id, name: $name, data: $data, color: $color, access: $access) {
    success
    message
    image {
      ...image
    }
  }
}

mutation CreateProduct(
  $agency_id: ID!
  $name: String!
  $description: String!
  $url_name: String!
  $duration: String
  $image_logo: ImageInput
  $image_hero: ImageInput
  $status: String
) {
  create_product(
    agency_id: $agency_id
    name: $name
    description: $description
    url_name: $url_name
    duration: $duration
    image_logo: $image_logo
    image_hero: $image_hero
    status: $status
  ) {
    success
    message
    product {
      ...product
    }
  }
}

mutation UpdateProduct(
  $product_id: ID!
  $name: String
  $description: String
  $url_name: String
  $duration: String
  $default_price_id: ID
  $image_logo: ImageInput
  $image_hero: ImageInput
  $status: String
) {
  update_product(
    product_id: $product_id
    name: $name
    description: $description
    url_name: $url_name
    duration: $duration
    default_price_id: $default_price_id
    image_logo: $image_logo
    image_hero: $image_hero
    status: $status
  ) {
    success
    message
    product {
      ...product
    }
  }
}

mutation DeleteProduct($product_id: ID!) {
  delete_product(product_id: $product_id) {
    success
    message
    product {
      id
    }
  }
}

mutation CreatePrice(
  $product_id: ID!
  $unit_amount: Int!
  $currency: String!
  $recurring_interval: String
  $recurring_interval_count: Int
  $status: String
) {
  create_price(
    product_id: $product_id
    unit_amount: $unit_amount
    currency: $currency
    recurring_interval: $recurring_interval
    recurring_interval_count: $recurring_interval_count
    status: $status
  ) {
    success
    message
    price {
      ...price
    }
  }
}

mutation CreateCoupon(
  $stripe_account_id: ID!
  $amount_off: Int
  $currency: String
  $percent_off: Int
  $duration: String
  $duration_in_months: Int
  $name: String
  $id: String
  $applies_to: CouponAppliesToInput
  $max_redemptions: Int
  $redeem_by: Int
) {
  create_coupon(
    stripe_account_id: $stripe_account_id
    amount_off: $amount_off
    currency: $currency
    percent_off: $percent_off
    duration: $duration
    duration_in_months: $duration_in_months
    name: $name
    id: $id
    applies_to: $applies_to
    max_redemptions: $max_redemptions
    redeem_by: $redeem_by
  ) {
    success
    message
    coupon {
      ...coupon
    }
  }
}

mutation UpdateCoupon($stripe_account_id: ID!, $coupon_id: ID!, $name: String) {
  update_coupon(stripe_account_id: $stripe_account_id, coupon_id: $coupon_id, name: $name) {
    success
    message
    coupon {
      ...coupon
    }
  }
}

mutation DeleteCoupon($stripe_account_id: ID!, $coupon_id: ID!) {
  delete_coupon(stripe_account_id: $stripe_account_id, coupon_id: $coupon_id) {
    success
    message
    coupon {
      id
    }
  }
}

mutation CreatePromotionCode(
  $stripe_account_id: ID!
  $coupon: String!
  $active: Boolean
  $code: String
  $customer: String
  $expires_at: Int
  $max_redemptions: Int
  $restrictions: PromotionCodeRestrictionsInput
) {
  create_promotion_code(
    stripe_account_id: $stripe_account_id
    coupon: $coupon
    active: $active
    code: $code
    customer: $customer
    expires_at: $expires_at
    max_redemptions: $max_redemptions
    restrictions: $restrictions
  ) {
    success
    message
    promotion_code {
      ...promotion_code
    }
  }
}

mutation UpdatePromotionCode($stripe_account_id: ID!, $promotion_code_id: ID!, $active: Boolean) {
  update_promotion_code(
    stripe_account_id: $stripe_account_id
    promotion_code_id: $promotion_code_id
    active: $active
  ) {
    success
    message
    promotion_code {
      ...promotion_code
    }
  }
}

mutation CreateSubscription(
  $stripe_account_id: ID!
  $customer: ID!
  $items: [SubscriptionItemInput!]!
  $cancel_at_period_end: Boolean
  $default_payment_method: String
  $payment_behaviour: String
  $backdate_start_date: Int
  $billing_cycle_anchor: Int
  $cancel_at: Int
  $collection_method: String
  $coupon: ID
  $days_until_due: Int
  $default_source: String
  $promotion_code: ID
  $proration_behaviour: String
  $trial_end: Int
  $trial_from_plan: Boolean
  $trial_period_days: Int
) {
  create_subscription(
    stripe_account_id: $stripe_account_id
    customer: $customer
    items: $items
    cancel_at_period_end: $cancel_at_period_end
    default_payment_method: $default_payment_method
    payment_behaviour: $payment_behaviour
    backdate_start_date: $backdate_start_date
    billing_cycle_anchor: $billing_cycle_anchor
    cancel_at: $cancel_at
    collection_method: $collection_method
    coupon: $coupon
    days_until_due: $days_until_due
    default_source: $default_source
    promotion_code: $promotion_code
    proration_behaviour: $proration_behaviour
    trial_end: $trial_end
    trial_from_plan: $trial_from_plan
    trial_period_days: $trial_period_days
  ) {
    success
    message
    subscription {
      ...subscription
    }
  }
}

mutation CancelSubscription(
  $stripe_account_id: ID!
  $subscription_id: ID!
  $cancel_at_period_end: Boolean
  $cancel_at: Int
  $invoice_now: Boolean
  $prorate: Boolean
) {
  cancel_subscription(
    stripe_account_id: $stripe_account_id
    subscription_id: $subscription_id
    cancel_at_period_end: $cancel_at_period_end
    cancel_at: $cancel_at
    invoice_now: $invoice_now
    prorate: $prorate
  ) {
    success
    message
    subscription {
      ...subscription
    }
  }
}

mutation CreateInvoice(
  $stripe_account_id: ID!
  $customer: ID!
  $auto_advance: Boolean
  $collection_method: String
  $description: String
  $footer: String
  $subscription: ID
  $days_until_due: Int
  $default_payment_method: ID
  $default_source: ID
  $due_date: Int
  $currency: String
  $items: [InvoiceItemInput!]
) {
  create_invoice(
    stripe_account_id: $stripe_account_id
    customer: $customer
    auto_advance: $auto_advance
    collection_method: $collection_method
    description: $description
    footer: $footer
    subscription: $subscription
    days_until_due: $days_until_due
    default_payment_method: $default_payment_method
    default_source: $default_source
    due_date: $due_date
    currency: $currency
    items: $items
  ) {
    success
    message
    invoice {
      ...invoice
    }
  }
}

mutation UpdateInvoice(
  $stripe_account_id: ID!
  $invoice_id: ID!
  $auto_advance: Boolean
  $collection_method: String
  $description: String
  $footer: String
  $subscription: ID
  $days_until_due: Int
  $default_payment_method: ID
  $default_source: ID
  $due_date: Int
) {
  update_invoice(
    stripe_account_id: $stripe_account_id
    invoice_id: $invoice_id
    auto_advance: $auto_advance
    collection_method: $collection_method
    description: $description
    footer: $footer
    subscription: $subscription
    days_until_due: $days_until_due
    default_payment_method: $default_payment_method
    default_source: $default_source
    due_date: $due_date
  ) {
    success
    message
    invoice {
      ...invoice
    }
  }
}

mutation DeleteInvoice($stripe_account_id: ID!, $invoice_id: ID!) {
  delete_invoice(stripe_account_id: $stripe_account_id, invoice_id: $invoice_id) {
    success
    message
    invoice {
      id
    }
  }
}

mutation VoidInvoice($stripe_account_id: ID!, $invoice_id: ID!) {
  void_invoice(stripe_account_id: $stripe_account_id, invoice_id: $invoice_id) {
    success
    message
    invoice {
      id
    }
  }
}

mutation FinalizeInvoice($stripe_account_id: ID!, $invoice_id: ID!) {
  finalize_invoice(stripe_account_id: $stripe_account_id, invoice_id: $invoice_id) {
    success
    message
    invoice {
      id
    }
  }
}

mutation MarkInvoiceUncollectible($stripe_account_id: ID!, $invoice_id: ID!) {
  mark_invoice_uncollectible(stripe_account_id: $stripe_account_id, invoice_id: $invoice_id) {
    success
    message
    invoice {
      id
    }
  }
}

mutation CreateInvoiceItem(
  $stripe_account_id: ID!
  $customer: ID!
  $invoice: ID
  $amount: Int
  $currency: String
  $description: String
  $period: PeriodInput
  $price: ID
  $discountable: Boolean
  $quantity: Int
  $unit_amount: Int
  $unit_amount_decimal: String
) {
  create_invoiceitem(
    stripe_account_id: $stripe_account_id
    customer: $customer
    invoice: $invoice
    amount: $amount
    currency: $currency
    description: $description
    period: $period
    price: $price
    discountable: $discountable
    quantity: $quantity
    unit_amount: $unit_amount
    unit_amount_decimal: $unit_amount_decimal
  ) {
    success
    message
    invoiceitem {
      ...invoiceitem
    }
  }
}

mutation UpdateInvoiceItem(
  $stripe_account_id: ID!
  $invoiceitem_id: ID!
  $amount: Int
  $description: String
  $period: PeriodInput
  $price: ID
  $discountable: Boolean
  $quantity: Int
  $unit_amount: Int
  $unit_amount_decimal: String
) {
  update_invoiceitem(
    stripe_account_id: $stripe_account_id
    invoiceitem_id: $invoiceitem_id
    amount: $amount
    description: $description
    period: $period
    price: $price
    discountable: $discountable
    quantity: $quantity
    unit_amount: $unit_amount
    unit_amount_decimal: $unit_amount_decimal
  ) {
    success
    message
    invoiceitem {
      ...invoiceitem
    }
  }
}

mutation DeleteInvoiceItem($stripe_account_id: ID!, $invoiceitem_id: ID!) {
  delete_invoiceitem(stripe_account_id: $stripe_account_id, invoiceitem_id: $invoiceitem_id) {
    success
    message
    invoiceitem {
      id
    }
  }
}

mutation CreateCustomer($stripe_account_id: ID!, $email_address: String!, $name: String!) {
  create_customer(
    stripe_account_id: $stripe_account_id
    email_address: $email_address
    name: $name
  ) {
    success
    message
    customer {
      ...customer
    }
  }
}

mutation UpdateCustomer($customer_id: ID!, $name: String, $email_address: String) {
  update_customer(customer_id: $customer_id, name: $name, email_address: $email_address) {
    success
    message
    customer {
      ...customer
    }
  }
}

mutation DeleteCustomer($customer_id: ID!) {
  delete_customer(customer_id: $customer_id) {
    success
    message
    customer {
      id
    }
  }
}

mutation CreateBankAccount(
  $stripe_account_id: ID!
  $country: String!
  $currency: String!
  $account_number: String!
  $account_holder_name: String
  $account_holder_type: String
  $routing_number: String
  $default_for_currency: Boolean
) {
  create_bank_account(
    stripe_account_id: $stripe_account_id
    account_holder_name: $account_holder_name
    country: $country
    currency: $currency
    account_number: $account_number
    account_holder_type: $account_holder_type
    routing_number: $routing_number
    default_for_currency: $default_for_currency
  ) {
    success
    message
    bank_account {
      ...bank_account
    }
  }
}

mutation UpdateBankAccount(
  $stripe_account_id: ID!
  $bank_account_id: ID!
  $account_holder_name: String
  $account_holder_type: String
  $default_for_currency: Boolean
) {
  update_bank_account(
    stripe_account_id: $stripe_account_id
    bank_account_id: $bank_account_id
    account_holder_name: $account_holder_name
    account_holder_type: $account_holder_type
    default_for_currency: $default_for_currency
  ) {
    success
    message
    bank_account {
      ...bank_account
    }
  }
}

mutation DeleteBankAccount($stripe_account_id: ID!, $bank_account_id: ID!) {
  delete_bank_account(stripe_account_id: $stripe_account_id, bank_account_id: $bank_account_id) {
    success
    message
    bank_account {
      id
    }
  }
}

mutation UpdateAgencySettings(
  $setting_id: ID!
  $checkout_success_url: String
  $checkout_cancel_url: String
) {
  update_agency_settings(
    setting_id: $setting_id
    checkout_success_url: $checkout_success_url
    checkout_cancel_url: $checkout_cancel_url
  ) {
    success
    message
    setting {
      ...agency_settings
    }
  }
}

mutation UpdateProductSettings(
  $setting_id: ID!
  $checkout_success_url: String
  $checkout_cancel_url: String
) {
  update_product_settings(
    setting_id: $setting_id
    checkout_success_url: $checkout_success_url
    checkout_cancel_url: $checkout_cancel_url
  ) {
    success
    message
    setting {
      ...product_settings
    }
  }
}

mutation UpdatePage($page_id: ID!, $access: AccessLevel) {
  update_page(page_id: $page_id, access: $access) {
    success
    message
    page {
      ...page
    }
  }
}

mutation CreatePageBlock(
  $page_id: ID!
  $page_block_definition_id: ID!
  $data: Json!
  $after_id: ID
) {
  create_page_block(
    page_id: $page_id
    page_block_definition_id: $page_block_definition_id
    data: $data
    after_id: $after_id
  ) {
    success
    message
    page_block {
      ...page_block
    }
  }
}

mutation UpdatePageBlock($page_block_id: ID!, $data: Json!, $after_id: ID) {
  update_page_block(page_block_id: $page_block_id, data: $data, after_id: $after_id) {
    success
    message
    page_block {
      ...page_block
    }
  }
}

mutation DeletePageBlock($page_block_id: ID!) {
  delete_page_block(page_block_id: $page_block_id) {
    success
    message
    page_block {
      ...page_block
    }
  }
}

mutation CreateCredential($agency_id: ID!, $credential_type_id: ID!, $data: Json!, $name: String!) {
  create_credential(
    agency_id: $agency_id
    credential_type_id: $credential_type_id
    data: $data
    name: $name
  ) {
    success
    message
    credential {
      ...credential
    }
  }
}

mutation UpdateCredential($credential_id: ID!, $data: Json!) {
  update_credential(credential_id: $credential_id, data: $data) {
    success
    message
    credential {
      ...credential
    }
  }
}

mutation CreateIntegration(
  $agency_id: ID!
  $integration_type_id: ID!
  $credential_id: ID
  $product_id: ID
  $integration_config_id: ID
  $data: Json!
) {
  create_integration(
    agency_id: $agency_id
    integration_type_id: $integration_type_id
    credential_id: $credential_id
    product_id: $product_id
    integration_config_id: $integration_config_id
    data: $data
  ) {
    success
    message
    integration {
      ...integration
    }
  }
}

mutation UpdateIntegration($integration_id: ID!, $credential_id: ID, $data: Json!) {
  update_integration(integration_id: $integration_id, credential_id: $credential_id, data: $data) {
    success
    message
    integration {
      ...integration
    }
  }
}

mutation CreateIntegrationConfig(
  $agency_id: ID!
  $integration_type_id: ID!
  $credential_id: ID
  $name: String!
  $data: Json!
) {
  create_integration_config(
    agency_id: $agency_id
    integration_type_id: $integration_type_id
    credential_id: $credential_id
    name: $name
    data: $data
  ) {
    success
    message
    integration_config {
      ...integration_config
    }
  }
}

mutation UpdateIntegrationConfig(
  $integration_config_id: ID!
  $name: String
  $credential_id: ID
  $data: Json!
) {
  update_integration_config(
    integration_config_id: $integration_config_id
    credential_id: $credential_id
    name: $name
    data: $data
  ) {
    success
    message
    integration_config {
      ...integration_config
    }
  }
}
