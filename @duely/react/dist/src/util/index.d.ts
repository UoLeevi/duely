import type { ImageInput } from '@duely/core';
export declare const Util: {
    readFileAsDataUrl: typeof readFileAsDataUrl;
    readFileAsImageInput: typeof readFileAsImageInput;
    estimateImageColor: typeof estimateImageColor;
    dataUriFromSvg: typeof dataUriFromSvg;
    byteToHex: typeof byteToHex;
    hexToByte: typeof hexToByte;
    hsl2rgb: typeof hsl2rgb;
    hex2rgb: typeof hex2rgb;
    hex2hsl: typeof hex2hsl;
    rgb2hsl: typeof rgb2hsl;
    createClassName: typeof createClassName;
    formatDate: typeof formatDate;
    formatFileSize: typeof formatFileSize;
    findFirstFocusableChild: typeof findFirstFocusableChild;
    getNameInitials: typeof getNameInitials;
    pseudoRandom: typeof pseudoRandom;
    poisson: typeof poisson;
    truncate: typeof truncate;
    sentenceCase: typeof sentenceCase;
    mimeTypeFromDataUrl: typeof mimeTypeFromDataUrl;
};
declare function readFileAsDataUrl(file: File | null | undefined): Promise<string | null>;
declare function readFileAsImageInput(file: File | null | undefined): Promise<ImageInput | null>;
declare function estimateImageColor(url: string): Promise<string>;
declare function dataUriFromSvg(svg: string): string;
declare function byteToHex(x: number): string;
declare function hexToByte(x: string): number;
declare function hsl2rgb(h: number, s: number, l: number): number[];
declare function hex2rgb(hex: string): [number, number, number, number];
declare function hex2hsl(hex: string): (number | undefined)[];
declare function rgb2hsl(r: number, g: number, b: number, a?: number): (number | undefined)[];
declare function createClassName(...classNames: any[]): string;
declare function formatDate(d: Date): string;
declare function formatFileSize(size: number): string | undefined;
declare function findFirstFocusableChild(parent: ParentNode): Element | null;
declare function getNameInitials(name: string): string;
declare function pseudoRandom(seed?: number): number;
declare function poisson(mean: number, generateRandom?: () => number): number;
declare function truncate(text: string, maxLength: number): string;
declare function sentenceCase(text: string): string;
declare function mimeTypeFromDataUrl(dataUrl: string): string;
export {};
